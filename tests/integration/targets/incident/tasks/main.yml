- environment:
    SN_HOST: "{{ sn_host }}"
    SN_USERNAME: "{{ sn_username }}"
    SN_PASSWORD: "{{ sn_password }}"

  block:
    - name: Retrieve all incidents
      servicenow.itsm.incident_info:
      register: result

    - ansible.builtin.assert:
        that:
          - result.records != []


    - name: Create test incident - check mode
      servicenow.itsm.incident: &create-incident
        caller: admin
        state: "New"
        short_description: Test incident
        impact: "3 - Low"
        urgency: "3 - Low"
        attachments:
          - path: targets/incident/res/sample_file.txt
      check_mode: true
      register: result

    - ansible.builtin.assert: &create-incident-result
        that:
          - result is changed
          - result.record.state == "New"
          - result.record.impact == "3 - Low"
          - result.record.urgency == "3 - Low"
          - result.record.attachments | length != 0
          - result.record.attachments[0].file_name == "sample_file.txt"


    - name: Create test incident
      servicenow.itsm.incident: *create-incident
      register: test_result

    - name: Copy test_result into result for assertion
      set_fact:
        result: "{{ test_result }}"

    - ansible.builtin.assert: *create-incident-result


    - name: Make sure incident exists
      servicenow.itsm.incident_info:
        number: "{{ test_result.record.number }}"
      register: result

    - ansible.builtin.assert:
        that:
          - result.records[0].number == test_result.record.number
          - result.records[0].state == "New"
          - result.records[0].impact == "3 - Low"
          - result.records[0].urgency == "3 - Low"


    - name: Update incident with same urgency and impact - unchanged
      servicenow.itsm.incident:
        caller: admin
        number: "{{ test_result.record.number }}"
        impact: "3 - Low"
        urgency: "3 - Low"
      register: result

    - ansible.builtin.assert:
        that:
          - result is not changed


    - name: Update incident - check mode
      servicenow.itsm.incident: &update-incident
        caller: admin
        number: "{{ test_result.record.number }}"
        state: "In Progress"
        impact: "1 - High"
        urgency: "1 - High"
      check_mode: true
      register: result

    - ansible.builtin.assert: &update-incident-result
        that:
          - result is changed
          - result.record.state == "In Progress"
          - result.record.impact == "1 - High"
          - result.record.urgency == "1 - High"


    - name: Update incident
      servicenow.itsm.incident: *update-incident

    - ansible.builtin.assert: *update-incident-result


    - name: Make sure incident was updated
      servicenow.itsm.incident_info:
        number: "{{ test_result.record.number }}"
      register: result

    - ansible.builtin.assert:
        that:
          - result.records[0].number == test_result.record.number
          - result.records[0].state == "In Progress"
          - result.records[0].impact == "1 - High"
          - result.records[0].urgency == "1 - High"


    - name: Update incident with same params - unchanged
      servicenow.itsm.incident: *update-incident
      register: result

    - ansible.builtin.assert:
        that:
          - result is not changed


    - name: Fail closing incident without required data
      servicenow.itsm.incident:
        number: "{{ test_result.record.number }}"
        state: Closed
      ignore_errors: true
      register: result
    - ansible.builtin.assert:
        that:
          - result is failed
          - "'close_code' in result.msg"
          - "'close_notes' in result.msg"


    - name: Update incident state - check mode
      servicenow.itsm.incident: &update-incident-state
        caller: admin
        number: "{{ test_result.record.number }}"
        state: "Resolved"
        close_code: Solved Remotely (Permanently)
        close_notes: Done testing
      check_mode: true
      register: result

    - ansible.builtin.assert: &update-incident-state-result
        that:
          - result is changed
          - result.record.state == "Resolved"
          - result.record.close_code == "Solved Remotely (Permanently)"
          - result.record.close_notes == "Done testing"


    - name: Update incident
      servicenow.itsm.incident: *update-incident-state

    - ansible.builtin.assert: *update-incident-state-result


    - name: Get specific incident info by sysparm query
      servicenow.itsm.incident_info:
        query:
         - caller: = admin
           number: = {{ test_result.record.number }}
           state: = Resolved
           close_code: = Solved Remotely (Permanently)
           close_notes: = Done testing
      register: result

    - ansible.builtin.assert:
        that:
          - result.records | length == 1
          - result.records[0].caller_id != ""
          - result.records[0].number == test_result.record.number
          - result.records[0].state == "Resolved"
          - result.records[0].close_code == "Solved Remotely (Permanently)"
          - result.records[0].close_notes == "Done testing"


    - name: Make sure incident state was updated
      servicenow.itsm.incident_info:
        number: "{{ test_result.record.number }}"
      register: result

    - ansible.builtin.assert:
        that:
          - result.records[0].number == test_result.record.number
          - result.records[0].state == "Resolved"
          - result.records[0].close_code == "Solved Remotely (Permanently)"
          - result.records[0].close_notes == "Done testing"


    - name: Get incident info by sysparm query - close_notes and state
      servicenow.itsm.incident_info:
        query:
         - close_notes: LIKE Done testing
           state: = Resolved
      register: result

    - ansible.builtin.assert:
        that:
          - result.records[0].close_notes == "Done testing"
          - result.records[0].state == "Resolved"


    - name: Update incident with same state - unchanged
      servicenow.itsm.incident: *update-incident-state
      register: result

    - ansible.builtin.assert:
        that:
          - result is not changed


    - name: Delete incident - check mode
      servicenow.itsm.incident: &delete-incident
        caller: admin
        number: "{{ test_result.record.number }}"
        state: Absent
      check_mode: true
      register: result

    - ansible.builtin.assert: &delete-incident-result
        that:
          - result is changed


    - name: Delete incident
      servicenow.itsm.incident: *delete-incident

    - ansible.builtin.assert: *delete-incident-result


    - name: Make sure incident is absent
      servicenow.itsm.incident_info:
        number: "{{ test_result.record.number }}"
      register: result

    - ansible.builtin.assert:
        that:
          - result.records | length == 0


    - name: Test bad parameter combinator (number + query)
      servicenow.itsm.incident_info:
        number: "{{ test_result.record.number }}"
        query:
         - short_description: LIKE SAP
      ignore_errors: true
      register: result

    - ansible.builtin.assert:
        that:
          - result is failed
          - "'parameters are mutually exclusive: number|query' in result.msg"


    - name: Test invalid operator detection
      servicenow.itsm.incident_info:
        query:
         - short_description: LIKEE SAP
      ignore_errors: true
      register: result

    - ansible.builtin.assert:
        that:
          - result is failed
          - "'Invalid condition' in result.msg"


    - name: Get incident info by sysparm query - short_description
      servicenow.itsm.incident_info:
        query:
         - short_description: LIKE SAP
      register: result

    - ansible.builtin.assert:
        that:
          - "'SAP' in result.records[0].short_description"


    - name: Test unary operator with argument detection
      servicenow.itsm.incident_info:
        query:
         - short_description: ISEMPTY SAP
      ignore_errors: true
      register: result

    - ansible.builtin.assert:
        that:
          - result is failed
          - "'Operator ISEMPTY does not take any arguments' in result.msg"


    - name: Test sysparm query unary operator - short_description
      servicenow.itsm.incident_info:
        query:
         - short_description: ISNOTEMPTY
      register: result

    - ansible.builtin.assert:
        that:
          - result.records[0].short_description != ""
